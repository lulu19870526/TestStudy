package base.observe.Yingyong;

/**
 * 当一个对象变化时,其它依赖该对象的对象都会收到通知, 并且会随着变化!对象之间是一种一对多的关系。
 *
 * 换一种表达方式: 有很多观察者们依赖于(观察)同一个对象(主题),
 * 当这个被依赖的对象(主题)变化时, 观察者们也会随之变化.
 *
 *
 *
 * 本文中的例子如下: 有一个进度生成器, 用来模拟进度条的数值. 当进度数值更新后,
 * 就会通知进度栏更新值. 也就是进度栏是观察者, 随时间在变的进度值是主题内容.
 *
 *
 * 这是观察者的统一定义. 主题被修改时, 通过调用update()方法来通知观察者更新.
 * 观察者接口-观察者的统一定义
 */
public interface Observer {
    /**
     * Observer(观察者)会被数值生成器通知, 来更新自己的状态
     */
    void update(ProgressBar generator);
}
